// Code generated by go-bindata.
// sources:
// bootstrap/README.md
// bootstrap/amazon_k8s_1.7.0_ubuntu_16.04_master.sh
// bootstrap/amazon_k8s_1.7.0_ubuntu_16.04_node.sh
// bootstrap/digitalocean_k8s_1.7.0_ubuntu_16.04_master.sh
// bootstrap/digitalocean_k8s_1.7.0_ubuntu_16.04_node.sh
// bootstrap/inject.go
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrapReadmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xb1\x6e\xdc\x30\x10\x44\x7b\x7e\xc5\x00\x57\xa4\x31\x94\x4f\x08\x90\x22\xc0\x15\x49\x65\x38\xad\x28\x71\x64\xae\x8f\xe2\x0a\xe4\xd2\x82\x10\xe4\xdf\x03\xea\x1c\x23\x81\xeb\xdd\xd9\x79\x3b\x73\xc1\x57\x55\xab\x56\xfc\xe6\xdc\x63\x64\x25\x7c\x21\x2c\x12\xd3\xdf\x01\xea\x5c\x64\xb3\x0a\x8b\xde\x50\xa3\x6c\xd8\xc5\xe2\xb9\x14\xb8\xf8\x96\x0c\xe3\xad\x4d\x32\x6b\xc9\x23\xb6\xa2\x8b\x24\xd6\xc1\xb9\x6f\x64\xc2\x52\x48\x98\xc2\x87\x80\x43\x5b\x81\xee\xf9\x01\x5a\xb0\x6a\x90\xe5\xe8\x67\xba\xab\xc1\xe7\x03\x26\x2b\x87\x93\xe4\xdd\xb5\xf3\x70\x59\x38\x9b\xbc\x32\x1d\xd8\x3b\xc5\x4e\xb4\xae\xaa\x18\x5b\x65\x41\xf0\xe6\xc7\xee\x22\x59\x0c\x1e\x4f\xdf\x9d\xbb\x5c\x2e\xb8\x22\x93\xa1\x0f\x8c\xeb\x96\xbc\x11\xda\x0c\x9a\x09\x5d\xde\xac\x3f\x3c\xea\xdc\x0f\xed\xa8\x08\x9a\x3f\xd9\x80\x9f\x45\x8c\x98\x7c\x8d\x48\x72\x23\x7c\xff\x71\xf8\xcf\x60\xd5\xc2\x13\x02\x92\xe1\x3f\x9c\xbc\x43\xd7\xa8\x2d\x05\x5c\x11\xf4\x8b\x73\xd7\xe5\xf4\x28\xf4\x29\x1d\x98\x7d\x86\xe6\x74\xe0\x99\x06\x31\x2c\x45\xd7\x7f\x53\xf5\x39\x20\xeb\x1e\xd9\xd3\x48\x95\x0f\xa7\xb8\xab\x7a\x0e\xbd\x8a\xf1\xc9\xa7\xc6\xfa\xeb\xf7\x88\x6a\xa5\xcd\xd6\xbf\x0e\x5c\x24\x13\x73\xab\xa6\x2b\x6e\x3c\x3e\xbf\xf6\x2d\x6c\x5e\xca\x5b\xa1\xbb\xa4\x84\x89\x90\xfc\xc2\xd9\x18\x20\xd9\xf4\xde\xd4\x1d\x7e\x70\x8f\x51\xea\xfb\x9e\xc7\xac\x81\x98\xa3\xcf\xcf\x7c\x38\xc1\xa4\x76\x11\x73\xb8\x47\x3d\x11\x2f\xad\xda\x79\x7e\xf8\x13\x00\x00\xff\xff\x8c\x9a\x9e\x97\x62\x02\x00\x00")

func bootstrapReadmeMdBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapReadmeMd,
		"bootstrap/README.md",
	)
}

func bootstrapReadmeMd() (*asset, error) {
	bytes, err := bootstrapReadmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/README.md", size: 610, mode: os.FileMode(420), modTime: time.Unix(1500387021, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAmazon_k8s_170_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x6f\xdc\x36\x10\xbd\xf3\x57\xbc\xee\x1a\x48\x03\x84\xa2\x9d\x16\x2d\x60\xc0\x05\x92\xd4\x07\x37\x45\x62\x18\x6e\x7b\xe9\x85\x22\x67\x25\x76\x29\x52\x20\x87\x6b\x2f\x6c\xf7\xb7\x17\x94\x64\x7b\x8d\x06\x45\x6f\xd9\x8b\x76\x1e\x67\xde\x7c\x3d\x72\xfd\x8d\x2a\x39\xa9\xd6\x05\x45\x61\x87\x56\xe7\x5e\x64\x62\x48\x12\xc6\xe2\x6f\x21\xd6\x90\x5f\xe9\x27\xd6\xb8\xee\x29\x13\x76\xda\x17\xca\xd0\x89\xe0\xc2\x5f\x64\x98\x2c\x5c\xe0\x08\xee\x09\xd9\x24\x37\x72\x83\x3f\x68\x72\xa0\xdb\xd1\x3b\xe3\xd8\xef\x11\x22\xa3\x64\x17\x3a\x68\x30\x0d\xa3\xd7\x5c\x0d\xaf\x43\x57\x74\x47\xe0\xb8\xd0\x4d\x3c\x73\x12\xb1\x86\xce\xf5\x84\x82\x89\x25\x4d\x6e\x3d\xa1\x64\x4a\x15\xf5\x6e\x70\x93\xbb\x4b\x15\x43\xdc\xbc\x60\x8e\x9d\x33\x70\xa1\x3a\x64\xc2\xc6\x79\xca\x0d\xde\xef\x61\x29\xbb\x2e\x40\x7b\xff\xdc\xc0\xd2\x54\xee\x63\xf1\x56\xac\xd1\x12\x74\xeb\xa7\xaa\x5a\x42\x5d\x81\x66\xa4\x12\xd8\x0d\xf4\x06\x3a\xd8\xb9\xdb\x9e\xbc\x5f\x7a\x46\x22\xed\x71\x13\xd3\xb6\xc1\xc5\x06\xfb\x58\x10\x88\x2c\x4c\x0c\xd6\xb1\x8b\x41\xfb\xb9\xa4\x37\xb8\x49\x8e\x09\x8e\x6b\x71\xd3\x8a\xd7\x88\x09\x83\xde\x12\x74\x88\xdc\x53\x7a\xc1\xdc\x88\xb5\x58\x8b\xeb\xcf\x1f\xcf\x3f\x9d\xad\x2e\x3e\xfd\x72\xfe\xe1\xfa\xfc\xe7\xc9\x5c\x89\xcb\xcf\x57\xd7\xcf\x60\xb5\x56\x5f\x53\x23\xc2\x94\xe4\x21\x33\x7a\xe6\x31\x9f\x2a\x35\x6a\xb3\xd5\x1d\xe5\xc6\xf8\x58\x6c\xd3\xc5\xd8\x79\x6a\x4c\x1c\x94\x1e\x59\xd9\x68\xea\x57\x6e\x69\xdf\x74\x63\x87\x7b\xe4\x62\x23\x16\x08\xda\x5a\x48\xc1\xb1\x98\x1e\x8a\x78\xf2\x55\x39\x96\x64\x28\x37\xde\x65\x6e\xac\xda\x96\x96\x52\x20\x5e\x10\x91\x7b\x48\x83\x57\x64\xfa\x88\x95\xa5\x76\xaa\xe4\x54\xd5\xd0\xe6\xc0\xd7\x45\x85\x67\x53\xde\x52\x70\xda\x63\xd0\x2e\xac\xf0\xd3\xff\x4d\xf6\x4a\x88\x5a\x6a\x47\x8c\x32\x5a\xcd\x04\xb9\x7f\x42\x5c\xc8\x5c\x25\x26\xf7\xf8\x53\x00\x40\x8e\x46\xf3\xf2\x9f\x5a\xae\xf2\xca\x8b\x69\xa3\xd9\x52\x6a\x5c\x5c\xec\xca\xc1\x49\x87\x3c\xc6\xc4\x72\x9a\xe5\x72\x52\x2b\xf0\xc4\x07\x96\xb6\xc3\xd9\x49\xf3\x63\x73\x2c\x8f\x8f\x17\x78\x9a\xb5\x2c\xec\x7c\x16\x42\xe4\x7d\x66\x1a\x0c\x7b\x50\x98\x34\x3d\x67\x3b\xc0\x33\xeb\xc4\x8f\xb0\xb8\xfc\xed\xfd\xaf\x17\x1f\x2e\x2e\xcf\x8e\xbe\x25\xf3\x76\x20\xd6\x56\xb3\x86\x94\x63\x69\xbd\x33\xd2\x8d\xbb\xef\x71\x0f\x53\x18\xd2\x62\x85\x15\xe4\x06\x6f\x5f\x8b\xcb\xab\x8b\xdf\xdf\x5d\x9f\x4f\x81\x6e\x63\x62\xd8\xb8\xba\xd1\x2e\xd1\x08\xf9\x0e\x27\x20\xee\x8f\x1f\x01\x17\x88\x0f\x48\x4e\x67\x92\x7f\xd1\x9e\xe0\x1e\xb7\x3a\x75\xf9\xb5\x10\x4b\xb3\x48\x94\x89\x9f\x2c\x17\x1c\x43\x4a\x3d\xba\x4c\x69\x47\x49\xb6\x2e\x58\x59\xe7\x86\xa3\xbb\x7a\x1f\x1e\x20\x25\xc7\x2d\x05\x1c\xdd\x4d\x97\xe6\x01\x2f\xfc\xb5\xdd\x51\x62\x97\x49\x6a\x6b\x13\xe5\x5c\xe3\x96\x11\x3c\xbc\xf0\x34\x94\x58\xd2\x2d\x27\x2d\xb3\x0e\x2f\xfd\x8e\xee\x9e\xda\x7f\x10\xd3\x53\xa9\xc3\x36\xe3\x23\xf9\x4c\x7b\x9c\xbe\x9e\xea\xad\xb3\xd6\xe3\xe8\x67\x45\xc8\xcd\xa3\x36\x6d\x34\xb9\x19\x53\xac\x6f\x91\xd1\xde\x99\xd8\xc4\xd4\xa9\xdd\xdb\xe6\x3b\xd5\x11\xd7\xd7\x4c\x4e\x3b\xa2\x43\x09\xaa\x45\x61\xba\x3e\x2e\xaa\x8f\xf9\xf1\x58\xdb\x41\x9d\x34\x3f\xa8\x85\x6a\xaf\x07\x3f\x27\x94\x53\x11\xf3\x62\x26\x89\x1f\x90\x69\x3b\xb8\xd0\xd4\x43\x21\x86\xad\x75\x09\x72\x84\xea\xe3\x40\xaa\xb4\x25\x70\x51\xd3\xf5\x11\x66\xfc\x8f\xd0\x2f\x04\xa8\x39\x9f\x30\x7d\xbc\x09\x90\x57\x98\x0f\x4f\xe7\xcf\x17\x02\xfe\x09\x00\x00\xff\xff\x97\x66\x54\x00\x03\x07\x00\x00")

func bootstrapAmazon_k8s_170_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAmazon_k8s_170_ubuntu_1604_masterSh,
		"bootstrap/amazon_k8s_1.7.0_ubuntu_16.04_master.sh",
	)
}

func bootstrapAmazon_k8s_170_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrapAmazon_k8s_170_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/amazon_k8s_1.7.0_ubuntu_16.04_master.sh", size: 1795, mode: os.FileMode(420), modTime: time.Unix(1500407735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapAmazon_k8s_170_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x3d\x6f\xdc\x38\x14\xec\xf9\x2b\xe6\x56\x06\xdc\x58\x92\xaf\x3a\xc0\x80\x0f\xb8\x8f\x2d\x7c\x87\x38\x40\xb2\x40\x9a\x34\x14\xf9\x2c\xd1\x4b\xf1\x09\x7c\x8f\xb6\x17\x8e\xf3\xdb\x03\x69\x15\x7f\x74\xe9\xac\x46\x9a\xe1\x68\x38\x8f\x9c\xea\xb7\xb6\x48\x6e\xbb\x90\x5a\x4a\x77\xe8\xac\x0c\x46\x48\x51\x93\x71\x1e\xdf\x8d\xa9\x50\xbf\xd3\x63\x2a\xec\x06\x12\xc2\x9d\x8d\x85\x04\x36\x13\x42\xba\x25\xa7\xe4\x11\x92\x32\x74\x20\x88\xcb\x61\xd2\x06\x5f\x68\x11\xd0\xc3\x14\x83\x0b\x1a\x0f\x48\xac\x28\x12\x52\x0f\x0b\xa5\x71\x8a\x56\x67\x10\x6d\xea\x8b\xed\x09\xca\xab\xdd\xe2\x73\xdc\xc4\x54\xb0\x32\xaf\x50\x72\x5c\xf2\x22\x1b\x08\x45\x28\xcf\x6c\x0c\x63\x58\xe4\x21\xcf\x1c\xf8\xe6\x8d\x33\xf7\xc1\x21\xa4\x59\x20\x84\x9b\x10\x49\x1a\xfc\x7d\x80\x27\x09\x7d\x82\x8d\xf1\x65\x80\x75\x28\x19\xb8\x44\x6f\x2a\x74\x04\xdb\xc5\x25\x55\x47\x98\xaf\xc0\x2a\x72\x49\x1a\x46\x3a\x83\x4d\xfe\x38\xed\x40\x31\xae\x33\x23\x93\x8d\xb8\xe7\xbc\x6f\x70\x75\x83\x03\x17\x24\x22\x0f\xc7\xc9\x07\x0d\x9c\x6c\x3c\x46\x3a\xc3\x7d\x0e\x4a\x08\x3a\x87\x5b\xae\xb8\x02\x67\x8c\x76\x4f\xb0\x89\x75\xa0\xfc\xc6\xb9\x31\x95\xa9\xcc\xee\xe3\xff\xdb\xeb\xcb\xcd\xd5\xf5\x7f\xdb\x7f\x76\xdb\x7f\x17\xb8\x31\x1f\xfe\xfa\xbc\xdb\x7e\x7a\xa1\x8f\x78\xf3\x9e\x3d\x31\xae\xe4\x88\x5a\x30\xa8\x4e\x72\xd1\xb6\x93\x75\x7b\xdb\x93\x34\x2e\x72\xf1\x4d\xcf\xdc\x47\x6a\x1c\x8f\xad\x9d\xb4\xf5\xec\xe6\x77\xbd\xa7\x43\xd3\x4f\x3d\xbe\x41\x8a\x67\xac\x14\xac\xf7\xa8\x8d\x72\x71\x03\x5a\xd2\x45\xdb\x0a\x97\xec\x48\x9a\x18\x44\x1b\xdf\xee\x4b\x47\x39\x91\xae\x8c\x91\x01\xb5\xc3\x29\xb9\x81\xb1\xf1\xd4\x2d\x49\x2e\xda\xf9\xd7\xe6\x95\x36\x70\x8b\x17\x58\x3f\x50\x0a\x36\x62\xb4\x21\x6d\xf0\xe7\xaf\x6e\x76\x6a\xcc\x1c\xb5\x27\x45\x99\xbc\x55\x42\x7d\x78\x66\x42\x12\x9d\x6b\x56\x1f\xf0\xd5\x00\x80\xb0\xb3\xba\x7e\x53\xa7\x73\xc5\x64\x85\x9e\xdd\x9e\x72\x13\x78\xc5\xb3\x87\x66\x9b\x64\xe2\xac\xf5\x72\x96\xeb\xca\x9c\x20\x92\xbe\x42\xd6\x8f\x97\xbf\x37\x7f\x34\xe7\xf5\xf9\xb9\x31\x72\x10\xa5\xd1\x69\x04\xa5\xa5\xc4\x47\xeb\x57\xbc\xa8\xcd\xfa\x93\x36\xab\x03\x32\x09\xe9\x33\xba\xe5\x90\x50\xd7\xca\x7b\x4a\x38\x79\x5c\xfa\xf6\x84\x93\xc7\x63\xc3\x9e\x7e\x04\x00\x00\xff\xff\x23\x59\x14\x94\xaa\x04\x00\x00")

func bootstrapAmazon_k8s_170_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapAmazon_k8s_170_ubuntu_1604_nodeSh,
		"bootstrap/amazon_k8s_1.7.0_ubuntu_16.04_node.sh",
	)
}

func bootstrapAmazon_k8s_170_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrapAmazon_k8s_170_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/amazon_k8s_1.7.0_ubuntu_16.04_node.sh", size: 1194, mode: os.FileMode(420), modTime: time.Unix(1500407735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapDigitalocean_k8s_170_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x6f\xdc\x36\x10\xbd\xf3\x57\xbc\xee\x1a\x48\x03\x84\xa2\x9d\x16\x2d\x60\xc0\x05\x92\xd4\x07\x37\x45\x62\x18\x6e\x7b\xe9\x85\x22\x67\x25\x76\x29\x52\x20\x87\x6b\x2f\x6c\xf7\xb7\x17\x94\x64\x7b\x8d\x06\x45\x6f\xd9\x8b\x76\x1e\x67\xde\x7c\x3d\x72\xfd\x8d\x2a\x39\xa9\xd6\x05\x45\x61\x87\x56\xe7\x5e\x64\x62\x48\x12\xc6\xe2\x6f\x21\xd6\x90\x5f\xe9\x27\xd6\xb8\xee\x29\x13\x76\xda\x17\xca\xd0\x89\xe0\xc2\x5f\x64\x98\x2c\x5c\xe0\x08\xee\x09\xd9\x24\x37\x72\x83\x3f\x68\x72\xa0\xdb\xd1\x3b\xe3\xd8\xef\x11\x22\xa3\x64\x17\x3a\x68\x30\x0d\xa3\xd7\x5c\x0d\xaf\x43\x57\x74\x47\xe0\xb8\xd0\x4d\x3c\x73\x12\xb1\x86\xce\xf5\x84\x82\x89\x25\x4d\x6e\x3d\xa1\x64\x4a\x15\xf5\x6e\x70\x93\xbb\x4b\x15\x43\xdc\xbc\x60\x8e\x9d\x33\x70\xa1\x3a\x64\xc2\xc6\x79\xca\x0d\xde\xef\x61\x29\xbb\x2e\x40\x7b\xff\xdc\xc0\xd2\x54\xee\x63\xf1\x56\xac\xd1\x12\x74\xeb\xa7\xaa\x5a\x42\x5d\x81\x66\xa4\x12\xd8\x0d\xf4\x06\x3a\xd8\xb9\xdb\x9e\xbc\x5f\x7a\x46\x22\xed\x71\x13\xd3\xb6\xc1\xc5\x06\xfb\x58\x10\x88\x2c\x4c\x0c\xd6\xb1\x8b\x41\xfb\xb9\xa4\x37\xb8\x49\x8e\x09\x8e\x6b\x71\xd3\x8a\xd7\x88\x09\x83\xde\x12\x74\x88\xdc\x53\x7a\xc1\xdc\x88\xb5\x58\x8b\xeb\xcf\x1f\xcf\x3f\x9d\xad\x2e\x3e\xfd\x72\xfe\xe1\xfa\xfc\xe7\xc9\x5c\x89\xcb\xcf\x57\xd7\xcf\x60\xb5\x56\x5f\x53\x23\xc2\x94\xe4\x21\x33\x7a\xe6\x31\x9f\x2a\x35\x6a\xb3\xd5\x1d\xe5\xc6\xf8\x58\x6c\xd3\xc5\xd8\x79\x6a\x4c\x1c\x94\x1e\x59\xd9\x68\xea\x57\x6e\x69\xdf\x74\x63\x87\x7b\xe4\x62\x23\x16\x08\xda\x5a\x48\xc1\xb1\x98\x1e\x8a\x78\xf2\x55\x39\x96\x64\x28\x37\xde\x65\x6e\xac\xda\x96\x96\x52\x20\x5e\x10\x91\x7b\x48\x83\x57\x64\xfa\x88\x95\xa5\x76\xaa\xe4\x54\xd5\xd0\xe6\xc0\xd7\x45\x85\x67\x53\xde\x52\x70\xda\x63\xd0\x2e\xac\xf0\xd3\xff\x4d\xf6\x4a\x88\x5a\x6a\x47\x8c\x32\x5a\xcd\x04\xb9\x7f\x42\x5c\xc8\x5c\x25\x26\xf7\xf8\x53\x00\x40\x8e\x46\xf3\xf2\x9f\x5a\xae\xf2\xca\x8b\x69\xa3\xd9\x52\x6a\x5c\x5c\xec\xca\xc1\x49\x87\x3c\xc6\xc4\x72\x9a\xe5\x72\x52\x2b\xf0\xc4\x07\x96\xb6\xc3\xd9\x49\xf3\x63\x73\x2c\x8f\x8f\x17\x78\x9a\xb5\x2c\xec\x7c\x16\x42\xe4\x7d\x66\x1a\x0c\x7b\x50\x98\x34\x3d\x67\x3b\xc0\x33\xeb\xc4\x8f\xb0\xb8\xfc\xed\xfd\xaf\x17\x1f\x2e\x2e\xcf\x8e\xbe\x25\xf3\x76\x20\xd6\x56\xb3\x86\x94\x63\x69\xbd\x33\xd2\x8d\xbb\xef\x71\x0f\x53\x18\xd2\x62\x85\x15\xe4\x06\x6f\x5f\x8b\xcb\xab\x8b\xdf\xdf\x5d\x9f\x4f\x81\x6e\x63\x62\xd8\xb8\xba\xd1\x2e\xd1\x08\xf9\x0e\x27\x20\xee\x8f\x1f\x01\x17\x88\x0f\x48\x4e\x67\x92\x7f\xd1\x9e\xe0\x1e\xb7\x3a\x75\xf9\xb5\x10\x4b\xb3\x48\x94\x89\x9f\x2c\x17\x1c\x43\x4a\x3d\xba\x4c\x69\x47\x49\xb6\x2e\x58\x59\xe7\x86\xa3\xbb\x7a\x1f\x1e\x20\x25\xc7\x2d\x05\x1c\xdd\x4d\x97\xe6\x01\x2f\xfc\xb5\xdd\x51\x62\x97\x49\x6a\x6b\x13\xe5\x5c\xe3\x96\x11\x3c\xbc\xf0\x34\x94\x58\xd2\x2d\x27\x2d\xb3\x0e\x2f\xfd\x8e\xee\x9e\xda\x7f\x10\xd3\x53\xa9\xc3\x36\xe3\x23\xf9\x4c\x7b\x9c\xbe\x9e\xea\xad\xb3\xd6\xe3\xe8\x67\x45\xc8\xcd\xa3\x36\x6d\x34\xb9\x19\x53\xac\x6f\x91\xd1\xde\x99\xd8\xc4\xd4\xa9\xdd\xdb\xe6\x3b\xd5\x11\xd7\xd7\x4c\x4e\x3b\xa2\x43\x09\xaa\x45\x61\xba\x3e\x2e\xaa\x8f\xf9\xf1\x58\xdb\x41\x9d\x34\x3f\xa8\x85\x6a\xaf\x07\x3f\x27\x94\x53\x11\xf3\x62\x26\x89\x1f\x90\x69\x3b\xb8\xd0\xd4\x43\x21\x86\xad\x75\x09\x72\x84\xea\xe3\x40\xaa\xb4\x25\x70\x51\xd3\xf5\x11\x66\xfc\x8f\xd0\x2f\x04\xa8\x39\x9f\x30\x7d\xbc\x09\x90\x57\x98\x0f\x4f\xe7\xcf\x17\x02\xfe\x09\x00\x00\xff\xff\x97\x66\x54\x00\x03\x07\x00\x00")

func bootstrapDigitalocean_k8s_170_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapDigitalocean_k8s_170_ubuntu_1604_masterSh,
		"bootstrap/digitalocean_k8s_1.7.0_ubuntu_16.04_master.sh",
	)
}

func bootstrapDigitalocean_k8s_170_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrapDigitalocean_k8s_170_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/digitalocean_k8s_1.7.0_ubuntu_16.04_master.sh", size: 1795, mode: os.FileMode(420), modTime: time.Unix(1500407735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapDigitalocean_k8s_170_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\x4d\x4f\xdc\x4a\x10\xbc\xfb\x57\xd4\x5b\x23\x71\xc1\x36\xef\xf4\x24\x24\x9e\x94\x8f\x3d\x90\x28\x44\x4a\x56\xca\x25\x97\xf1\x4c\x63\x0f\x3b\x9e\xb6\xa6\x7b\x80\x15\x21\xbf\x3d\xf2\x07\x02\x92\x4b\x6e\xf8\x62\x57\x75\x77\x4d\xb5\xa7\xca\x7f\x9a\x2c\xa9\x69\x7d\x6c\x28\xde\xa0\x35\xd2\x17\x42\x8a\x8a\x0a\xeb\xf0\xb3\x28\x4a\x54\xaf\xf4\x14\x25\x76\x3d\x09\xe1\xc6\x84\x4c\x02\x93\x08\x3e\x5e\x93\x55\x72\xf0\x51\x19\xda\x13\xc4\x26\x3f\x6a\x8d\x6f\x34\x37\xd0\xdd\x18\xbc\xf5\x1a\x0e\x88\xac\xc8\xe2\x63\x07\x03\xa5\x61\x0c\x46\x27\x10\x4c\xec\xb2\xe9\x08\xca\xab\xdc\xac\xb3\x1c\x52\x94\x30\x32\x55\x28\x5a\xce\x69\x6e\xeb\x09\x59\x28\x4d\x6c\xf0\x83\x9f\xdb\x7d\x9a\x38\xf0\xd5\x0b\x65\xee\xbc\x85\x8f\x53\x83\x10\xae\x7c\x20\xa9\xf1\xf6\x00\x47\xe2\xbb\x08\x13\xc2\xd3\x02\xeb\x52\xd2\x73\x0e\xae\x28\xd1\x12\x4c\x1b\x66\x57\x2d\x61\xba\x02\xa3\x48\x39\xaa\x1f\xe8\x04\x26\xba\x65\xdb\x9e\x42\x58\x77\x46\x22\x13\x70\xcb\x69\x5f\xe3\xe2\x0a\x07\xce\x88\x44\x0e\x96\xa3\xf3\xea\x39\x9a\xb0\x58\x3a\xc1\x6d\xf2\x4a\xf0\x3a\x99\x9b\xaf\xb8\x04\x27\x0c\x66\x4f\x30\x91\xb5\xa7\xf4\x42\xb9\x2e\xca\xa2\x2c\x76\x9f\x3f\x6e\x2f\xcf\x37\x17\x97\x1f\xb6\xef\x76\xdb\xf7\x33\xdc\x14\x9f\xde\x7c\xdd\x6d\xbf\x3c\xd1\x0b\xde\xbc\x66\x4e\x0a\xc9\x8e\x61\x73\x0a\xa8\x04\xbd\xea\x28\x67\x4d\x33\x1a\xbb\x37\x1d\x49\x6d\x03\x67\x57\x77\xcc\x5d\xa0\xda\xf2\xd0\x98\x51\x1b\xc7\x76\x7a\x57\x7b\x3a\xd4\xdd\xd8\xe1\x07\x66\x91\x95\x82\x71\x0e\xd5\xa2\xab\x9c\x6d\x8f\x86\x74\x1e\x68\x84\x73\xb2\x24\x75\xf0\xa2\xb5\x6b\xf6\xb9\xa5\x14\x49\x57\x66\x19\x91\x1e\x95\xc5\x31\xd9\x9e\xb1\x71\xd4\xce\x9e\xce\x9a\x69\xbe\x7e\x36\xe0\xb9\xc1\x13\xac\xee\x28\x7a\x13\x30\x18\x1f\x37\xf8\xff\x6f\x4f\x3c\x5e\xd7\x9f\x9c\x77\xa4\xc8\xa3\x33\x4a\xa8\x0e\x2f\x69\x1f\x45\xa7\xfc\x55\x07\x7c\x2f\x00\x40\xd8\x1a\x5d\xbf\xa9\xd5\x29\x7b\xb2\x42\xc7\x76\x4f\xa9\xf6\xbc\xe2\x49\x43\x93\x89\x32\x72\xd2\x6a\xfe\xbf\x6b\x65\xf2\x12\x48\x9f\x21\xe3\x86\xf3\x7f\xeb\xff\xea\xd3\xea\xf4\x74\x75\x26\x07\x51\x1a\xac\x06\x50\x9c\x23\xbe\xe8\xff\x5e\x14\x35\x49\x1f\x6b\x4b\xb1\xda\x3e\x6a\x22\x91\x90\xfe\xc1\x5e\xb3\x8f\xa8\x2a\xe5\x3d\x45\x1c\xdd\xcf\x11\x7d\xc0\xd1\xfd\x12\xca\x87\x5f\x01\x00\x00\xff\xff\x90\x8a\x8f\xe1\xdd\x04\x00\x00")

func bootstrapDigitalocean_k8s_170_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapDigitalocean_k8s_170_ubuntu_1604_nodeSh,
		"bootstrap/digitalocean_k8s_1.7.0_ubuntu_16.04_node.sh",
	)
}

func bootstrapDigitalocean_k8s_170_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrapDigitalocean_k8s_170_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/digitalocean_k8s_1.7.0_ubuntu_16.04_node.sh", size: 1245, mode: os.FileMode(420), modTime: time.Unix(1500407735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapInjectGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x3f\x6b\x80\x30\x10\x47\xe7\xdc\xa7\x38\x9c\x0c\x84\x42\xd7\x42\xb7\x2e\x5d\xbb\x8a\xc3\x99\x9e\x62\xd5\x24\x5c\x4e\xa1\x88\xdf\xbd\xf8\x27\x9d\x6e\xf8\xbd\xf7\xb8\x44\x7e\xa2\x81\xb1\x8b\x51\xb3\x0a\x25\x80\x71\x49\x51\x14\xab\xac\x32\x86\x21\x57\x00\xfd\x1a\x3c\x7e\x86\x1f\xf6\x5a\x7f\x93\x12\x36\x6d\xf7\xab\xec\x70\xa3\x79\xe5\x8c\x0b\xa5\xe6\xa6\xdb\xfb\x58\xac\x0b\xc2\x22\x51\x2c\xee\x60\xb2\xca\xc7\x29\xbf\xbd\xe3\x4d\x5d\x2d\x0b\xa6\x8f\x82\x93\xc3\xed\x5c\x84\xc2\xc0\xa5\xbb\x83\xf9\xb7\x8a\x94\x5f\xbe\x38\xcd\xe4\xb9\x7e\x16\x77\xb9\x0e\x5f\x2d\x98\x03\x8c\xb0\xae\x12\x9e\x0f\x0b\x63\x1d\x86\x71\x86\x03\xfe\x02\x00\x00\xff\xff\x3b\x57\x73\x5c\xef\x00\x00\x00")

func bootstrapInjectGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapInjectGo,
		"bootstrap/inject.go",
	)
}

func bootstrapInjectGo() (*asset, error) {
	bytes, err := bootstrapInjectGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/inject.go", size: 239, mode: os.FileMode(420), modTime: time.Unix(1500164115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap/README.md": bootstrapReadmeMd,
	"bootstrap/amazon_k8s_1.7.0_ubuntu_16.04_master.sh": bootstrapAmazon_k8s_170_ubuntu_1604_masterSh,
	"bootstrap/amazon_k8s_1.7.0_ubuntu_16.04_node.sh": bootstrapAmazon_k8s_170_ubuntu_1604_nodeSh,
	"bootstrap/digitalocean_k8s_1.7.0_ubuntu_16.04_master.sh": bootstrapDigitalocean_k8s_170_ubuntu_1604_masterSh,
	"bootstrap/digitalocean_k8s_1.7.0_ubuntu_16.04_node.sh": bootstrapDigitalocean_k8s_170_ubuntu_1604_nodeSh,
	"bootstrap/inject.go": bootstrapInjectGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap": &bintree{nil, map[string]*bintree{
		"README.md": &bintree{bootstrapReadmeMd, map[string]*bintree{}},
		"amazon_k8s_1.7.0_ubuntu_16.04_master.sh": &bintree{bootstrapAmazon_k8s_170_ubuntu_1604_masterSh, map[string]*bintree{}},
		"amazon_k8s_1.7.0_ubuntu_16.04_node.sh": &bintree{bootstrapAmazon_k8s_170_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"digitalocean_k8s_1.7.0_ubuntu_16.04_master.sh": &bintree{bootstrapDigitalocean_k8s_170_ubuntu_1604_masterSh, map[string]*bintree{}},
		"digitalocean_k8s_1.7.0_ubuntu_16.04_node.sh": &bintree{bootstrapDigitalocean_k8s_170_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"inject.go": &bintree{bootstrapInjectGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

