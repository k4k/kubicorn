// Code generated by go-bindata.
// sources:
// bootstrap/1.7.0_ubuntu_16.04_master.sh
// bootstrap/1.7.0_ubuntu_16.04_node.sh
// bootstrap/inject.go
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrap170_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xbd\x6e\xde\x38\x10\xec\xf5\x14\x73\x9f\x0e\x70\x63\x49\xbd\x81\xbb\xe2\x2e\x5f\xe1\x04\x70\x1a\x03\x69\xd2\x50\xe4\x5a\x62\x44\x71\x05\xee\xd2\xb6\x90\x9f\x67\x0f\x28\xc9\xb0\x9d\x34\xe9\xac\x46\x9a\xd9\xdd\xe1\xac\x38\xf5\x5f\x5d\x96\xd4\xf5\x3e\x76\x14\xef\xd1\x1b\x19\x2b\x21\x45\x43\x95\x75\xf8\x51\x55\x35\x9a\x37\x7a\xaa\x1a\xb7\x23\x09\xe1\xde\x84\x4c\x02\x93\x08\x3e\x7e\x21\xab\xe4\xe0\xa3\x32\x74\x24\x88\x4d\x7e\xd1\x16\x9f\x68\x6b\xa0\xc7\x25\x78\xeb\x35\xac\x88\xac\xc8\xe2\xe3\x00\x03\xa5\x79\x09\x46\x0b\x08\x26\x0e\xd9\x0c\x04\xe5\x43\x6e\xd3\xd9\x0f\xa9\x6a\x18\x29\x15\x8a\x96\x73\xda\xda\x46\x42\x16\x4a\x85\x0d\x7e\xf6\x5b\xbb\x4f\x85\x03\xdf\xbd\x52\xe6\xc1\x5b\xf8\x58\x1a\x84\x70\xe7\x03\x49\x8b\xff\x56\x38\x12\x3f\x44\x98\x10\x9e\x17\x38\x96\x92\x91\x73\x70\x55\x8d\x9e\x60\xfa\xb0\xb9\xea\x09\xe5\x0a\x8c\x22\xe5\xa8\x7e\xa6\x4b\x98\xe8\xf6\x6d\x47\x0a\xe1\xd8\x19\x89\x4c\xc0\x03\xa7\xa9\xc5\xf5\x1d\x56\xce\x88\x44\x0e\x96\xa3\xf3\xea\x39\x9a\xb0\x5b\xba\xc4\x43\xf2\x4a\xf0\x5a\xcc\x6d\x57\x5c\x83\x13\x66\x33\x11\x4c\x64\x1d\x29\xbd\x52\x6e\xab\xba\xaa\xab\xdb\x8f\x1f\xce\x37\xff\x9c\xae\x6f\xde\x9f\xff\xbf\x3d\xbf\xdb\xe0\xe9\x2d\xf3\x50\x49\x76\x0c\x9b\x53\x40\x23\x18\x55\x17\xb9\xea\xba\xc5\xd8\xc9\x0c\x24\xad\x0d\x9c\x5d\x3b\x30\x0f\x81\x5a\xcb\x73\x67\x16\xed\x1c\xdb\xf2\x6e\x26\x5a\xdb\x61\x19\xf0\x0d\x9b\xc8\x41\xc1\x38\x87\x66\xd7\x55\xce\x76\x44\x47\xba\x0d\x74\xc2\x39\x59\x92\x36\x78\xd1\xd6\x75\x53\xee\x29\x45\xd2\x83\xd9\x47\x64\x44\x63\x71\x41\x76\x64\x9c\x1c\xf5\x9b\xa7\xab\xae\xcc\xb7\x2f\x06\x3c\x77\x78\x86\xcd\x23\x45\x6f\x02\x66\xe3\xe3\x09\xff\xfe\xe9\x89\x17\xc7\xfa\xc5\xf9\x40\x8a\xbc\x38\xa3\x84\x66\x7d\x4d\xfb\x28\x5a\x72\xd6\xac\xf8\x5c\x01\x80\xb0\x35\x7a\x7c\x53\xaf\x25\x63\x72\x40\xc7\x76\xa2\xd4\x7a\x3e\x70\xd1\xd0\x64\xa2\x2c\x9c\xb4\xd9\xfe\xef\x51\x29\x5e\x02\xe9\x0b\x64\xdc\x7c\x18\x92\x55\x94\x66\xab\x01\x14\xb7\x04\xef\xb2\xbf\x16\x45\x4d\xd2\xa7\xda\x5e\x6c\xce\x4f\x52\x48\x24\xa4\xbf\xb1\x3e\x7a\x45\xd3\x28\x4f\x14\xf1\xf7\xd7\x2d\x81\xdf\x7f\x06\x00\x00\xff\xff\xf8\xc2\x67\x4c\xb2\x04\x00\x00")

func bootstrap170_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrap170_ubuntu_1604_masterSh,
		"bootstrap/1.7.0_ubuntu_16.04_master.sh",
	)
}

func bootstrap170_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrap170_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/1.7.0_ubuntu_16.04_master.sh", size: 1202, mode: os.FileMode(420), modTime: time.Unix(1500153305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrap170_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xbd\x6e\xdc\x3c\x10\xec\xf5\x14\xf3\x9d\x0c\xb8\xb1\xa4\xde\xc0\x17\x20\x3f\x57\x38\x41\x1c\x20\x39\x20\x4d\x1a\x8a\x5c\x4b\xf4\x51\x5c\x81\xbb\xb4\x2d\x38\xce\xb3\x07\xfa\x31\x6c\x27\x4d\x3a\xab\x91\x66\x76\x77\x38\x2b\x4e\xf9\x5f\x93\x25\x35\xad\x8f\x0d\xc5\x1b\xb4\x46\xfa\x42\x48\x51\x51\x61\x1d\x7e\x15\x45\x89\xea\x95\x9e\xa2\xc4\xa1\x27\x21\xdc\x98\x90\x49\x60\x12\xc1\xc7\x6b\xb2\x4a\x0e\x3e\x2a\x43\x7b\x82\xd8\xe4\x47\xad\xf1\x9d\x96\x06\xba\x1b\x83\xb7\x5e\xc3\x84\xc8\x8a\x2c\x3e\x76\x30\x50\x1a\xc6\x60\x74\x06\xc1\xc4\x2e\x9b\x8e\xa0\xbc\xc9\x2d\x3a\xeb\x21\x45\x09\x23\x73\x85\xa2\xe5\x9c\x96\xb6\x9e\x90\x85\xd2\xcc\x06\x3f\xf8\xa5\xdd\xa7\x99\x03\x5f\xbd\x50\xe6\xce\x5b\xf8\x38\x37\x08\xe1\xca\x07\x92\x1a\xef\x26\x38\x12\xdf\x45\x98\x10\x9e\x16\xd8\x96\x92\x9e\x73\x70\x45\x89\x96\x60\xda\xb0\xb8\x6a\x09\xf3\x15\x18\x45\xca\x51\xfd\x40\x67\x30\xd1\xad\xdb\xf6\x14\xc2\xb6\x33\x12\x99\x80\x5b\x4e\xc7\x1a\x17\x57\x98\x38\x23\x12\x39\x58\x8e\xce\xab\xe7\x68\xc2\x6a\xe9\x0c\xb7\xc9\x2b\xc1\xeb\x6c\x6e\xb9\xe2\x12\x9c\x30\x98\x23\xc1\x44\xd6\x9e\xd2\x0b\xe5\xba\x28\x8b\xb2\x38\x7c\xf9\xb4\xbf\xfc\x7f\x77\x71\xf9\x71\xff\xfe\xb0\xff\xb0\xc0\x5d\xf1\xf9\xed\xb7\xc3\xfe\xeb\x13\xbd\xe2\xdd\x6b\xe6\xa4\x90\xec\x18\x36\xa7\x80\x4a\xd0\xab\x8e\x72\xde\x34\xa3\xb1\x47\xd3\x91\xd4\x36\x70\x76\x75\xc7\xdc\x05\xaa\x2d\x0f\x8d\x19\xb5\x71\x6c\xe7\x77\x75\xa4\xa9\xee\xc6\x0e\x3f\xb1\x88\x6c\x14\x8c\x73\xa8\x56\x5d\xe5\x6c\x7b\x34\xa4\xcb\x40\x23\x9c\x93\x25\xa9\x83\x17\xad\x5d\x73\xcc\x2d\xa5\x48\xba\x31\xeb\x88\xf4\xa8\x2c\x4e\xc9\xf6\x8c\x9d\xa3\x76\xf1\x74\xde\xcc\xf3\xf5\xb3\x01\xcf\x0d\x9e\x60\x75\x47\xd1\x9b\x80\xc1\xf8\xb8\xc3\x9b\x7f\x3d\xf1\x74\x5b\x7f\x76\xde\x91\x22\x8f\xce\x28\xa1\x9a\x5e\xd2\x3e\x8a\xce\xf9\xab\x26\xfc\x28\x00\x40\xd8\x1a\xdd\xbe\xa9\xd5\x39\x7b\xb2\x41\xc7\xf6\x48\xa9\xf6\xbc\xe1\x59\x43\x93\x89\x32\x72\xd2\x6a\xf9\xbf\x5b\x65\xf6\x12\x48\x9f\x21\xe3\x86\xcd\x90\x4c\xa2\x34\x58\x0d\xa0\xb8\x24\x7b\x95\xfd\xb3\x28\x6a\x92\x3e\xd6\xd6\x62\xb5\x7f\x94\x42\x22\x21\xfd\x8b\xbd\x66\x1f\x51\x55\xca\x47\x8a\x38\xb9\x5f\x92\xf9\x80\x93\xfb\x35\x8b\x0f\xbf\x03\x00\x00\xff\xff\x37\x67\x95\x55\xd4\x04\x00\x00")

func bootstrap170_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrap170_ubuntu_1604_nodeSh,
		"bootstrap/1.7.0_ubuntu_16.04_node.sh",
	)
}

func bootstrap170_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrap170_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/1.7.0_ubuntu_16.04_node.sh", size: 1236, mode: os.FileMode(420), modTime: time.Unix(1500153305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapInjectGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x3f\x6b\x80\x30\x10\x47\xe7\xdc\xa7\x38\x9c\x0c\x84\x42\xd7\x42\xb7\x2e\x5d\xbb\x8a\xc3\x99\x9e\x62\xd5\x24\x5c\x4e\xa1\x88\xdf\xbd\xf8\x27\x9d\x6e\xf8\xbd\xf7\xb8\x44\x7e\xa2\x81\xb1\x8b\x51\xb3\x0a\x25\x80\x71\x49\x51\x14\xab\xac\x32\x86\x21\x57\x00\xfd\x1a\x3c\x7e\x86\x1f\xf6\x5a\x7f\x93\x12\x36\x6d\xf7\xab\xec\x70\xa3\x79\xe5\x8c\x0b\xa5\xe6\xa6\xdb\xfb\x58\xac\x0b\xc2\x22\x51\x2c\xee\x60\xb2\xca\xc7\x29\xbf\xbd\xe3\x4d\x5d\x2d\x0b\xa6\x8f\x82\x93\xc3\xed\x5c\x84\xc2\xc0\xa5\xbb\x83\xf9\xb7\x8a\x94\x5f\xbe\x38\xcd\xe4\xb9\x7e\x16\x77\xb9\x0e\x5f\x2d\x98\x03\x8c\xb0\xae\x12\x9e\x0f\x0b\x63\x1d\x86\x71\x86\x03\xfe\x02\x00\x00\xff\xff\x3b\x57\x73\x5c\xef\x00\x00\x00")

func bootstrapInjectGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapInjectGo,
		"bootstrap/inject.go",
	)
}

func bootstrapInjectGo() (*asset, error) {
	bytes, err := bootstrapInjectGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/inject.go", size: 239, mode: os.FileMode(420), modTime: time.Unix(1500148045, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap/1.7.0_ubuntu_16.04_master.sh": bootstrap170_ubuntu_1604_masterSh,
	"bootstrap/1.7.0_ubuntu_16.04_node.sh": bootstrap170_ubuntu_1604_nodeSh,
	"bootstrap/inject.go": bootstrapInjectGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap": &bintree{nil, map[string]*bintree{
		"1.7.0_ubuntu_16.04_master.sh": &bintree{bootstrap170_ubuntu_1604_masterSh, map[string]*bintree{}},
		"1.7.0_ubuntu_16.04_node.sh": &bintree{bootstrap170_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"inject.go": &bintree{bootstrapInjectGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

