// Code generated by go-bindata.
// sources:
// bootstrap/1.7.0_ubuntu_16.04_master.sh
// bootstrap/1.7.0_ubuntu_16.04_node.sh
// bootstrap/inject.go
// DO NOT EDIT!

package bootstrap

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bootstrap170_ubuntu_1604_masterSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x6f\x1b\x37\x10\xbd\xf3\x57\xbc\x4a\x06\xd2\x00\xe1\xb2\x76\x8b\x1e\x0c\xa4\x40\x92\xfa\xe0\xa6\x48\x0c\xc3\x6d\x2f\xbd\x70\xc9\xd1\x2e\x2b\x2e\xb9\x20\x87\xb2\x05\xdb\xfd\xed\x05\x77\xd7\xb6\x84\x06\x45\x6f\xd1\x65\x35\xc3\x37\x6f\xbe\x1e\xb9\xfe\x46\x95\x9c\x54\xeb\x82\xa2\xb0\x43\xab\x73\x2f\x32\x31\x24\x09\x63\xf1\xb7\x10\x6b\xc8\xaf\xf4\x13\x6b\xdc\xf4\x94\x09\x3b\xed\x0b\x65\xe8\x44\x70\xe1\x2f\x32\x4c\x16\x2e\x70\x04\xf7\x84\x6c\x92\x1b\xb9\xc1\x1f\x34\x01\xe8\x6e\xf4\xce\x38\xf6\x7b\x84\xc8\x28\xd9\x85\x0e\x1a\x4c\xc3\xe8\x35\x57\xc3\xeb\xd0\x15\xdd\x11\x38\x2e\x74\x13\xcf\x9c\x44\xac\xa1\x73\x3d\xa1\x60\x62\x49\x13\xac\x27\x94\x4c\xa9\x7a\xbd\x1b\xdc\x04\x77\xa9\xfa\x10\x37\x47\xcc\xb1\x73\x06\x2e\x54\x40\x26\x6c\x9c\xa7\xdc\xe0\xfd\x1e\x96\xb2\xeb\x02\xb4\xf7\x2f\x0d\x2c\x4d\xe5\x3e\x16\x6f\xc5\x1a\x2d\x41\xb7\x7e\xaa\xaa\x25\xd4\x15\x68\x46\x2a\x81\xdd\x40\x6f\xa0\x83\x9d\xbb\xed\xc9\xfb\xa5\x67\x24\xd2\x1e\xb7\x31\x6d\x1b\x5c\x6e\xb0\x8f\x05\x81\xc8\xc2\xc4\x60\x1d\xbb\x18\xb4\x9f\x4b\x7a\x83\xdb\xe4\x98\xe0\xb8\x16\x37\xad\x78\x8d\x98\x30\xe8\x2d\x41\x87\xc8\x3d\xa5\x23\xe6\x46\xac\xc5\x5a\xdc\x7c\xfe\x78\xf1\xe9\xed\xea\xf2\xd3\x2f\x17\x1f\x6e\x2e\x7e\x9e\xcc\x95\xb8\xfa\x7c\x7d\xf3\xe2\xac\xd6\xea\x6b\x6a\x44\x98\x92\x3c\x64\x46\xcf\x3c\xe6\x73\xa5\x46\x6d\xb6\xba\xa3\xdc\x18\x1f\x8b\x6d\xba\x18\x3b\x4f\x8d\x89\x83\xd2\x23\x2b\x1b\x4d\xfd\xca\x2d\xed\x9b\x6e\xec\xf0\x80\x5c\x6c\xc4\xe2\x82\xb6\x16\x52\x70\x2c\xa6\x87\x22\x9e\xb0\x2a\xc7\x92\x0c\xe5\xc6\xbb\xcc\x8d\x55\xdb\xd2\x52\x0a\xc4\x8b\x47\xe4\x1e\xd2\xe0\x15\x99\x3e\x62\x65\xa9\x9d\x2a\x39\x57\x35\xb4\x39\xc0\xba\xa8\xf0\x62\xca\x3b\x0a\x4e\x7b\x0c\xda\x85\x15\x7e\xfa\xbf\xc9\x5e\x09\x51\x4b\xed\x88\x51\x46\xab\x99\x20\xf7\xcf\x1e\x17\x32\x57\x89\xc9\x3d\xfe\x14\x00\x90\xa3\xd1\xbc\xfc\xa7\x96\xab\xbc\xf2\x62\xda\x68\xb6\x94\x1a\x17\x17\xbb\x72\x70\xd2\x21\x8f\x31\xb1\x9c\x66\xb9\x9c\xd4\x0a\x3c\xf1\x81\xa5\xed\xb0\x58\xd3\x88\x65\x61\xe7\xb3\x10\x22\xef\x33\xd3\x60\xd8\x83\xc2\x24\xe5\x39\xc9\x81\x3f\xb3\x4e\xfc\xe4\x16\x57\xbf\xbd\xff\xf5\xf2\xc3\xe5\xd5\xdb\x93\x6f\xc9\x9c\x0d\xc4\xda\x6a\xd6\x90\x72\x2c\xad\x77\x46\xba\x71\xf7\x03\x1e\x60\x0a\x43\x5a\xac\xb0\x82\xdc\xe0\xec\xb5\xb8\xba\xbe\xfc\xfd\xdd\xcd\xc5\x14\xe8\x36\x26\x86\x8d\xab\x8b\xec\x12\x8d\x90\xef\x70\x0a\xe2\xfe\xbb\x27\x87\x0b\xc4\x07\x24\xe7\x33\xc9\xbf\x68\x4f\xf1\x80\x3b\x9d\xba\xfc\x5a\x88\xa7\x1e\x13\x65\xe2\x67\xcb\x05\xc7\x90\x52\x8f\x2e\x53\xda\x51\x92\xad\x0b\x56\xd6\x71\xe1\xe4\xbe\x5e\x83\x47\x48\xc9\x71\x4b\x01\x27\xf7\xd3\x5d\x79\xc4\x11\x5e\xdb\x1d\x25\x76\x99\xa4\xb6\x36\x51\xce\x35\x6e\x19\xc1\xe3\x11\xd2\x50\x62\x49\x77\x9c\xb4\xcc\x3a\x1c\xe3\x4e\xee\x9f\xdb\x7f\x14\xd3\x0b\xa9\xc3\x36\xe3\x23\xf9\x4c\x7b\x9c\xbf\x9e\xea\xad\xb3\xd6\xe3\xe8\x67\x21\xc8\xcd\x93\x24\x6d\x34\xb9\x19\x53\xac\x4f\x90\xd1\xde\x99\xd8\xc4\xd4\xa9\xdd\x59\xf3\xbd\xea\x88\xeb\x23\x26\xa7\x1d\xd1\xa1\xf2\xd4\x22\x2c\x5d\xdf\x14\xd5\xc7\xfc\x74\xac\xed\xa0\x4e\x9b\x1f\xd5\x42\xb5\xd7\x83\x9f\x13\xca\xa9\x88\x79\x31\x93\xb2\x0f\xc8\xb4\x1d\x5c\x68\xea\xa1\x10\xc3\xd6\xba\x04\x39\x42\xf5\x71\x20\x55\xda\x12\xb8\xa8\xe9\xd6\x08\x33\xfe\x47\xe8\x17\x02\xd4\x9c\x4f\x98\x3e\xde\x06\xc8\x6b\xcc\x87\xe7\xf3\xe7\x0b\x01\xff\x04\x00\x00\xff\xff\x43\xb2\x58\x7a\xfa\x06\x00\x00")

func bootstrap170_ubuntu_1604_masterShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrap170_ubuntu_1604_masterSh,
		"bootstrap/1.7.0_ubuntu_16.04_master.sh",
	)
}

func bootstrap170_ubuntu_1604_masterSh() (*asset, error) {
	bytes, err := bootstrap170_ubuntu_1604_masterShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/1.7.0_ubuntu_16.04_master.sh", size: 1786, mode: os.FileMode(420), modTime: time.Unix(1500236061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrap170_ubuntu_1604_nodeSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xbd\x6e\xdc\x3c\x10\xec\xf5\x14\xf3\x9d\x0c\xb8\xb1\xa4\xde\xc0\x17\x20\x3f\x57\x38\x41\x1c\x20\x39\x20\x4d\x1a\x8a\x5c\x4b\xf4\x51\x5c\x81\xbb\xb4\x2d\x38\xce\xb3\x07\xfa\x31\x6c\x27\x4d\x3a\xab\x91\x66\x76\x77\x38\x2b\x4e\xf9\x5f\x93\x25\x35\xad\x8f\x0d\xc5\x1b\xb4\x46\xfa\x42\x48\x51\x51\x61\x1d\x7e\x15\x45\x89\xea\x95\x9e\xa2\xc4\xa1\x27\x21\xdc\x98\x90\x49\x60\x12\xc1\xc7\x6b\xb2\x4a\x0e\x3e\x2a\x43\x7b\x82\xd8\xe4\x47\xad\xf1\x9d\x96\x06\xba\x1b\x83\xb7\x5e\xc3\x84\xc8\x8a\x2c\x3e\x76\x30\x50\x1a\xc6\x60\x74\x06\xc1\xc4\x2e\x9b\x8e\xa0\xbc\xc9\x2d\x3a\xeb\x21\x45\x09\x23\x73\x85\xa2\xe5\x9c\x96\xb6\x9e\x90\x85\xd2\xcc\x06\x3f\xf8\xa5\xdd\xa7\x99\x03\x5f\xbd\x50\xe6\xce\x5b\xf8\x38\x37\x08\xe1\xca\x07\x92\x1a\xef\x26\x38\x12\xdf\x45\x98\x10\x9e\x16\xd8\x96\x92\x9e\x73\x70\x45\x89\x96\x60\xda\xb0\xb8\x6a\x09\xf3\x15\x18\x45\xca\x51\xfd\x40\x67\x30\xd1\xad\xdb\xf6\x14\xc2\xb6\x33\x12\x99\x80\x5b\x4e\xc7\x1a\x17\x57\x98\x38\x23\x12\x39\x58\x8e\xce\xab\xe7\x68\xc2\x6a\xe9\x0c\xb7\xc9\x2b\xc1\xeb\x6c\x6e\xb9\xe2\x12\x9c\x30\x98\x23\xc1\x44\xd6\x9e\xd2\x0b\xe5\xba\x28\x8b\xb2\x38\x7c\xf9\xb4\xbf\xfc\x7f\x77\x71\xf9\x71\xff\xfe\xb0\xff\xb0\xc0\x5d\xf1\xf9\xed\xb7\xc3\xfe\xeb\x13\xbd\xe2\xdd\x6b\xe6\xa4\x90\xec\x18\x36\xa7\x80\x4a\xd0\xab\x8e\x72\xde\x34\xa3\xb1\x47\xd3\x91\xd4\x36\x70\x76\x75\xc7\xdc\x05\xaa\x2d\x0f\x8d\x19\xb5\x71\x6c\xe7\x77\x75\xa4\xa9\xee\xc6\x0e\x3f\xb1\x88\x6c\x14\x8c\x73\xa8\x56\x5d\xe5\x6c\x7b\x34\xa4\xcb\x40\x23\x9c\x93\x25\xa9\x83\x17\xad\x5d\x73\xcc\x2d\xa5\x48\xba\x31\xeb\x88\xf4\xa8\x2c\x4e\xc9\xf6\x8c\x9d\xa3\x76\xf1\x74\xde\xcc\xf3\xf5\xb3\x01\xcf\x0d\x9e\x60\x75\x47\xd1\x9b\x80\xc1\xf8\xb8\xc3\x9b\x7f\x3d\xf1\x74\x5b\x7f\x76\xde\x91\x22\x8f\xce\x28\xa1\x9a\x5e\xd2\x3e\x8a\xce\xf9\xab\x26\xfc\x28\x00\x40\xd8\x1a\xdd\xbe\xa9\xd5\x39\x7b\xb2\x41\xc7\xf6\x48\xa9\xf6\xbc\xe1\x59\x43\x93\x89\x32\x72\xd2\x6a\xf9\xbf\x5b\x65\xf6\x12\x48\x9f\x21\xe3\x86\xcd\x90\x4c\xa2\x34\x58\x0d\xa0\xb8\x24\x7b\x95\xfd\xb3\x28\x6a\x92\x3e\xd6\xd6\x62\xb5\x7f\x94\x42\x22\x21\xfd\x8b\xbd\x66\x1f\x51\x55\xca\x47\x8a\x38\xb9\x5f\x92\xf9\x80\x93\xfb\x35\x8b\x0f\xbf\x03\x00\x00\xff\xff\x37\x67\x95\x55\xd4\x04\x00\x00")

func bootstrap170_ubuntu_1604_nodeShBytes() ([]byte, error) {
	return bindataRead(
		_bootstrap170_ubuntu_1604_nodeSh,
		"bootstrap/1.7.0_ubuntu_16.04_node.sh",
	)
}

func bootstrap170_ubuntu_1604_nodeSh() (*asset, error) {
	bytes, err := bootstrap170_ubuntu_1604_nodeShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/1.7.0_ubuntu_16.04_node.sh", size: 1236, mode: os.FileMode(420), modTime: time.Unix(1500236061, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bootstrapInjectGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\x3f\x6b\x80\x30\x10\x47\xe7\xdc\xa7\x38\x9c\x0c\x84\x42\xd7\x42\xb7\x2e\x5d\xbb\x8a\xc3\x99\x9e\x62\xd5\x24\x5c\x4e\xa1\x88\xdf\xbd\xf8\x27\x9d\x6e\xf8\xbd\xf7\xb8\x44\x7e\xa2\x81\xb1\x8b\x51\xb3\x0a\x25\x80\x71\x49\x51\x14\xab\xac\x32\x86\x21\x57\x00\xfd\x1a\x3c\x7e\x86\x1f\xf6\x5a\x7f\x93\x12\x36\x6d\xf7\xab\xec\x70\xa3\x79\xe5\x8c\x0b\xa5\xe6\xa6\xdb\xfb\x58\xac\x0b\xc2\x22\x51\x2c\xee\x60\xb2\xca\xc7\x29\xbf\xbd\xe3\x4d\x5d\x2d\x0b\xa6\x8f\x82\x93\xc3\xed\x5c\x84\xc2\xc0\xa5\xbb\x83\xf9\xb7\x8a\x94\x5f\xbe\x38\xcd\xe4\xb9\x7e\x16\x77\xb9\x0e\x5f\x2d\x98\x03\x8c\xb0\xae\x12\x9e\x0f\x0b\x63\x1d\x86\x71\x86\x03\xfe\x02\x00\x00\xff\xff\x3b\x57\x73\x5c\xef\x00\x00\x00")

func bootstrapInjectGoBytes() ([]byte, error) {
	return bindataRead(
		_bootstrapInjectGo,
		"bootstrap/inject.go",
	)
}

func bootstrapInjectGo() (*asset, error) {
	bytes, err := bootstrapInjectGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bootstrap/inject.go", size: 239, mode: os.FileMode(420), modTime: time.Unix(1500164115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bootstrap/1.7.0_ubuntu_16.04_master.sh": bootstrap170_ubuntu_1604_masterSh,
	"bootstrap/1.7.0_ubuntu_16.04_node.sh":   bootstrap170_ubuntu_1604_nodeSh,
	"bootstrap/inject.go":                    bootstrapInjectGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"bootstrap": &bintree{nil, map[string]*bintree{
		"1.7.0_ubuntu_16.04_master.sh": &bintree{bootstrap170_ubuntu_1604_masterSh, map[string]*bintree{}},
		"1.7.0_ubuntu_16.04_node.sh":   &bintree{bootstrap170_ubuntu_1604_nodeSh, map[string]*bintree{}},
		"inject.go":                    &bintree{bootstrapInjectGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
